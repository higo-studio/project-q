//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using System;
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.NetCode.LowLevel.Unsafe;
using Unity.Collections.LowLevel.Unsafe;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;

namespace Higo.CharacterController.Generated
{
    [BurstCompile]
    public struct CharacterControllerInternalDataGhostComponentSerializer
    {
        static GhostComponentSerializer.State GetState()
        {
            // This needs to be lazy initialized because otherwise there is a depenency on the static initialization order which breaks il2cpp builds due to TYpeManager not being initialized yet
            if (!s_StateInitialized)
            {
                s_State = new GhostComponentSerializer.State
                {
                    GhostFieldsHash = 14053890699944147416,
                    ExcludeFromComponentCollectionHash = 0,
                    ComponentType = ComponentType.ReadWrite<CharacterControllerInternalData>(),
                    ComponentSize = UnsafeUtility.SizeOf<CharacterControllerInternalData>(),
                    SnapshotSize = UnsafeUtility.SizeOf<Snapshot>(),
                    ChangeMaskBits = ChangeMaskBits,
                    SendMask = GhostComponentSerializer.SendMask.Predicted,
                    SendToOwner = SendToOwnerType.All,
                    SendForChildEntities = 1,
                    VariantHash = 0,
                    CopyToSnapshot =
                        new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyToSnapshot),
                    CopyFromSnapshot =
                        new PortableFunctionPointer<GhostComponentSerializer.CopyToFromSnapshotDelegate>(CopyFromSnapshot),
                    RestoreFromBackup =
                        new PortableFunctionPointer<GhostComponentSerializer.RestoreFromBackupDelegate>(RestoreFromBackup),
                    PredictDelta = new PortableFunctionPointer<GhostComponentSerializer.PredictDeltaDelegate>(PredictDelta),
                    CalculateChangeMask =
                        new PortableFunctionPointer<GhostComponentSerializer.CalculateChangeMaskDelegate>(
                            CalculateChangeMask),
                    Serialize = new PortableFunctionPointer<GhostComponentSerializer.SerializeDelegate>(Serialize),
                    Deserialize = new PortableFunctionPointer<GhostComponentSerializer.DeserializeDelegate>(Deserialize),
                    #if UNITY_EDITOR || DEVELOPMENT_BUILD
                    ReportPredictionErrors = new PortableFunctionPointer<GhostComponentSerializer.ReportPredictionErrorsDelegate>(ReportPredictionErrors),
                    #endif
                };
                #if UNITY_EDITOR || DEVELOPMENT_BUILD
                s_State.NumPredictionErrorNames = GetPredictionErrorNames(ref s_State.PredictionErrorNames);
                #endif
                s_StateInitialized = true;
            }
            return s_State;
        }
        private static bool s_StateInitialized;
        private static GhostComponentSerializer.State s_State;
        public static GhostComponentSerializer.State State => GetState();
        public struct Snapshot
        {
            public int SupportedState;
            public float UnsupportedVelocity_x;
            public float UnsupportedVelocity_y;
            public float UnsupportedVelocity_z;
            public float Velocity_x;
            public float Velocity_y;
            public float Velocity_z;
            public uint IsJumping;
        }
        public const int ChangeMaskBits = 4;
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        private static void CopyToSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData, snapshotOffset + snapshotStride*i);
                ref var component = ref GhostComponentSerializer.TypeCast<CharacterControllerInternalData>(componentData, componentStride*i);
                ref var serializerState = ref GhostComponentSerializer.TypeCast<GhostSerializerState>(stateData, 0);
                snapshot.SupportedState = (int) component.SupportedState;
                snapshot.UnsupportedVelocity_x = component.UnsupportedVelocity.x;
                snapshot.UnsupportedVelocity_y = component.UnsupportedVelocity.y;
                snapshot.UnsupportedVelocity_z = component.UnsupportedVelocity.z;
                snapshot.Velocity_x = component.Velocity.x;
                snapshot.Velocity_y = component.Velocity.y;
                snapshot.Velocity_z = component.Velocity.z;
                snapshot.IsJumping = component.IsJumping?1u:0;
            }
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CopyToFromSnapshotDelegate))]
        private static void CopyFromSnapshot(IntPtr stateData, IntPtr snapshotData, int snapshotOffset, int snapshotStride, IntPtr componentData, int componentStride, int count)
        {
            for (int i = 0; i < count; ++i)
            {
                var deserializerState = GhostComponentSerializer.TypeCast<GhostDeserializerState>(stateData, 0);
                ref var snapshotInterpolationData = ref GhostComponentSerializer.TypeCast<SnapshotData.DataAtTick>(snapshotData, snapshotStride*i);
                ref var snapshotBefore = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotBefore, snapshotOffset);
                ref var snapshotAfter = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotInterpolationData.SnapshotAfter, snapshotOffset);
                //Compute the required owner mask for the components and buffers by retrievieng the ghost owner id from the data for the current tick.
                if (snapshotInterpolationData.GhostOwner > 0)
                {
                    var requiredOwnerMask = snapshotInterpolationData.GhostOwner == deserializerState.GhostOwner
                        ? SendToOwnerType.SendToOwner
                        : SendToOwnerType.SendToNonOwner;
                    if ((deserializerState.SendToOwner & requiredOwnerMask) == 0)
                        continue;
                }
                deserializerState.SnapshotTick = snapshotInterpolationData.Tick;
                float snapshotInterpolationFactorRaw = snapshotInterpolationData.InterpolationFactor;
                float snapshotInterpolationFactor = snapshotInterpolationFactorRaw;
                ref var component = ref GhostComponentSerializer.TypeCast<CharacterControllerInternalData>(componentData, componentStride*i);
                component.SupportedState = (CharacterControllerUtilities.CharacterSupportState) snapshotBefore.SupportedState;
                component.UnsupportedVelocity = new float3(snapshotBefore.UnsupportedVelocity_x, snapshotBefore.UnsupportedVelocity_y, snapshotBefore.UnsupportedVelocity_z);
                component.Velocity = new float3(snapshotBefore.Velocity_x, snapshotBefore.Velocity_y, snapshotBefore.Velocity_z);
                component.IsJumping = snapshotBefore.IsJumping != 0;

            }
        }


        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.RestoreFromBackupDelegate))]
        private static void RestoreFromBackup(IntPtr componentData, IntPtr backupData)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<CharacterControllerInternalData>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<CharacterControllerInternalData>(backupData, 0);
            component.SupportedState = backup.SupportedState;
            component.UnsupportedVelocity.x = backup.UnsupportedVelocity.x;
            component.UnsupportedVelocity.y = backup.UnsupportedVelocity.y;
            component.UnsupportedVelocity.z = backup.UnsupportedVelocity.z;
            component.Velocity.x = backup.Velocity.x;
            component.Velocity.y = backup.Velocity.y;
            component.Velocity.z = backup.Velocity.z;
            component.IsJumping = backup.IsJumping;
        }

        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.PredictDeltaDelegate))]
        private static void PredictDelta(IntPtr snapshotData, IntPtr baseline1Data, IntPtr baseline2Data, ref GhostDeltaPredictor predictor)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline1 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline1Data);
            ref var baseline2 = ref GhostComponentSerializer.TypeCast<Snapshot>(baseline2Data);
            snapshot.SupportedState = predictor.PredictInt(snapshot.SupportedState, baseline1.SupportedState, baseline2.SupportedState);
            snapshot.IsJumping = (uint)predictor.PredictInt((int)snapshot.IsJumping, (int)baseline1.IsJumping, (int)baseline2.IsJumping);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.CalculateChangeMaskDelegate))]
        private static void CalculateChangeMask(IntPtr snapshotData, IntPtr baselineData, IntPtr bits, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask;
            changeMask = (snapshot.SupportedState != baseline.SupportedState) ? 1u : 0;
            changeMask |= (snapshot.UnsupportedVelocity_x != baseline.UnsupportedVelocity_x) ? (1u<<1) : 0;
            changeMask |= (snapshot.UnsupportedVelocity_y != baseline.UnsupportedVelocity_y) ? (1u<<1) : 0;
            changeMask |= (snapshot.UnsupportedVelocity_z != baseline.UnsupportedVelocity_z) ? (1u<<1) : 0;
            changeMask |= (snapshot.Velocity_x != baseline.Velocity_x) ? (1u<<2) : 0;
            changeMask |= (snapshot.Velocity_y != baseline.Velocity_y) ? (1u<<2) : 0;
            changeMask |= (snapshot.Velocity_z != baseline.Velocity_z) ? (1u<<2) : 0;
            changeMask |= (snapshot.IsJumping != baseline.IsJumping) ? (1u<<3) : 0;
            GhostComponentSerializer.CopyToChangeMask(bits, changeMask, startOffset, 4);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.SerializeDelegate))]
        private static void Serialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamWriter writer, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
                writer.WritePackedIntDelta(snapshot.SupportedState, baseline.SupportedState, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedFloatDelta(snapshot.UnsupportedVelocity_x, baseline.UnsupportedVelocity_x, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedFloatDelta(snapshot.UnsupportedVelocity_y, baseline.UnsupportedVelocity_y, compressionModel);
            if ((changeMask & (1 << 1)) != 0)
                writer.WritePackedFloatDelta(snapshot.UnsupportedVelocity_z, baseline.UnsupportedVelocity_z, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedFloatDelta(snapshot.Velocity_x, baseline.Velocity_x, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedFloatDelta(snapshot.Velocity_y, baseline.Velocity_y, compressionModel);
            if ((changeMask & (1 << 2)) != 0)
                writer.WritePackedFloatDelta(snapshot.Velocity_z, baseline.Velocity_z, compressionModel);
            if ((changeMask & (1 << 3)) != 0)
                writer.WritePackedUIntDelta(snapshot.IsJumping, baseline.IsJumping, compressionModel);
        }
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.DeserializeDelegate))]
        private static void Deserialize(IntPtr snapshotData, IntPtr baselineData, ref DataStreamReader reader, ref NetworkCompressionModel compressionModel, IntPtr changeMaskData, int startOffset)
        {
            ref var snapshot = ref GhostComponentSerializer.TypeCast<Snapshot>(snapshotData);
            ref var baseline = ref GhostComponentSerializer.TypeCast<Snapshot>(baselineData);
            uint changeMask = GhostComponentSerializer.CopyFromChangeMask(changeMaskData, startOffset, ChangeMaskBits);
            if ((changeMask & (1 << 0)) != 0)
                snapshot.SupportedState = reader.ReadPackedIntDelta(baseline.SupportedState, compressionModel);
            else
                snapshot.SupportedState = baseline.SupportedState;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.UnsupportedVelocity_x = reader.ReadPackedFloatDelta(baseline.UnsupportedVelocity_x, compressionModel);
            else
                snapshot.UnsupportedVelocity_x = baseline.UnsupportedVelocity_x;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.UnsupportedVelocity_y = reader.ReadPackedFloatDelta(baseline.UnsupportedVelocity_y, compressionModel);
            else
                snapshot.UnsupportedVelocity_y = baseline.UnsupportedVelocity_y;
            if ((changeMask & (1 << 1)) != 0)
                snapshot.UnsupportedVelocity_z = reader.ReadPackedFloatDelta(baseline.UnsupportedVelocity_z, compressionModel);
            else
                snapshot.UnsupportedVelocity_z = baseline.UnsupportedVelocity_z;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.Velocity_x = reader.ReadPackedFloatDelta(baseline.Velocity_x, compressionModel);
            else
                snapshot.Velocity_x = baseline.Velocity_x;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.Velocity_y = reader.ReadPackedFloatDelta(baseline.Velocity_y, compressionModel);
            else
                snapshot.Velocity_y = baseline.Velocity_y;
            if ((changeMask & (1 << 2)) != 0)
                snapshot.Velocity_z = reader.ReadPackedFloatDelta(baseline.Velocity_z, compressionModel);
            else
                snapshot.Velocity_z = baseline.Velocity_z;
            if ((changeMask & (1 << 3)) != 0)
                snapshot.IsJumping = reader.ReadPackedUIntDelta(baseline.IsJumping, compressionModel);
            else
                snapshot.IsJumping = baseline.IsJumping;
        }
        #if UNITY_EDITOR || DEVELOPMENT_BUILD
        [BurstCompile]
        [MonoPInvokeCallback(typeof(GhostComponentSerializer.ReportPredictionErrorsDelegate))]
        private static void ReportPredictionErrors(IntPtr componentData, IntPtr backupData, ref UnsafeList<float> errors)
        {
            ref var component = ref GhostComponentSerializer.TypeCast<CharacterControllerInternalData>(componentData, 0);
            ref var backup = ref GhostComponentSerializer.TypeCast<CharacterControllerInternalData>(backupData, 0);
            int errorIndex = 0;
            errors[errorIndex] = math.max(errors[errorIndex], math.abs(component.SupportedState - backup.SupportedState));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.UnsupportedVelocity, backup.UnsupportedVelocity));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], math.distance(component.Velocity, backup.Velocity));
            ++errorIndex;
            errors[errorIndex] = math.max(errors[errorIndex], (component.IsJumping != backup.IsJumping) ? 1 : 0);
            ++errorIndex;
        }
        private static int GetPredictionErrorNames(ref FixedString512 names)
        {
            int nameCount = 0;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("SupportedState"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("UnsupportedVelocity"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("Velocity"));
            ++nameCount;
            if (nameCount != 0)
                names.Append(new FixedString32(","));
            names.Append(new FixedString64("IsJumping"));
            ++nameCount;
            return nameCount;
        }
        #endif
    }
}
