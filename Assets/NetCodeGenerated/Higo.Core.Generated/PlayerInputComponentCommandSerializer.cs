//THIS FILE IS AUTOGENERATED BY GHOSTCOMPILER. DON'T MODIFY OR ALTER.
using AOT;
using Unity.Burst;
using Unity.Networking.Transport;
using Unity.Entities;
using Unity.Collections;
using Unity.NetCode;
using Unity.Transforms;
using Unity.Mathematics;


namespace Higo.Core.Generated
{
    public struct PlayerInputComponentSerializer : ICommandDataSerializer<PlayerInputComponent>
    {
        public void Serialize(ref DataStreamWriter writer, in PlayerInputComponent data)
        {
            writer.WriteFloat(data.Movement.x);
            writer.WriteFloat(data.Movement.y);
            writer.WriteFloat(data.Forward.x);
            writer.WriteFloat(data.Forward.y);
            writer.WriteFloat(data.Forward.z);
            writer.WriteUInt(data.Jump ? 1u : 0);
            writer.WriteUInt(data.Shift ? 1u : 0);
        }

        public void Deserialize(ref DataStreamReader reader, ref PlayerInputComponent data)
        {
            data.Movement.x = reader.ReadFloat();
            data.Movement.y = reader.ReadFloat();
            data.Forward.x = reader.ReadFloat();
            data.Forward.y = reader.ReadFloat();
            data.Forward.z = reader.ReadFloat();
            data.Jump = (reader.ReadUInt() != 0) ? true : false;
            data.Shift = (reader.ReadUInt() != 0) ? true : false;
        }

        public void Serialize(ref DataStreamWriter writer, in PlayerInputComponent data, in PlayerInputComponent baseline, NetworkCompressionModel compressionModel)
        {
            writer.WritePackedFloatDelta(data.Movement.x, baseline.Movement.x, compressionModel);
            writer.WritePackedFloatDelta(data.Movement.y, baseline.Movement.y, compressionModel);
            writer.WritePackedFloatDelta(data.Forward.x, baseline.Forward.x, compressionModel);
            writer.WritePackedFloatDelta(data.Forward.y, baseline.Forward.y, compressionModel);
            writer.WritePackedFloatDelta(data.Forward.z, baseline.Forward.z, compressionModel);
            writer.WritePackedUInt(data.Jump ? 1u : 0, compressionModel);
            writer.WritePackedUInt(data.Shift ? 1u : 0, compressionModel);
        }

        public void Deserialize(ref DataStreamReader reader, ref PlayerInputComponent data, in PlayerInputComponent baseline, NetworkCompressionModel compressionModel)
        {
            data.Movement.x = reader.ReadPackedFloatDelta(baseline.Movement.x, compressionModel);
            data.Movement.y = reader.ReadPackedFloatDelta(baseline.Movement.y, compressionModel);
            data.Forward.x = reader.ReadPackedFloatDelta(baseline.Forward.x, compressionModel);
            data.Forward.y = reader.ReadPackedFloatDelta(baseline.Forward.y, compressionModel);
            data.Forward.z = reader.ReadPackedFloatDelta(baseline.Forward.z, compressionModel);
            data.Jump = (reader.ReadPackedUInt(compressionModel) != 0) ? true : false;
            data.Shift = (reader.ReadPackedUInt(compressionModel) != 0) ? true : false;
        }
    }
    public class PlayerInputComponentSendCommandSystem : CommandSendSystem<PlayerInputComponentSerializer, PlayerInputComponent>
    {
        [BurstCompile]
        struct SendJob : IJobEntityBatch
        {
            public SendJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var sendJob = new SendJob{data = InitJobData()};
            ScheduleJobData(sendJob);
        }
    }
    public class PlayerInputComponentReceiveCommandSystem : CommandReceiveSystem<PlayerInputComponentSerializer, PlayerInputComponent>
    {
        [BurstCompile]
        struct ReceiveJob : IJobEntityBatch
        {
            public ReceiveJobData data;
            public void Execute(ArchetypeChunk chunk, int orderIndex)
            {
                data.Execute(chunk, orderIndex);
            }
        }
        protected override void OnUpdate()
        {
            var recvJob = new ReceiveJob{data = InitJobData()};
            ScheduleJobData(recvJob);
        }
    }
}
